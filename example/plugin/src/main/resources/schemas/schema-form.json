{
  "$id": "urn:jsonschema:io:gravitee:policy:callout:configuration:CalloutHttpPolicyConfiguration",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "scope": {
      "title": "Scope",
      "description": "Execute policy on <strong>request</strong> (HEAD) phase, <strong>response</strong> (HEAD) phase, <strong>request_content</strong> (includes payload) phase, <strong>response content</strong> (includes payload) phase.",
      "type": "string",
      "default": "REQUEST",
      "enum": ["REQUEST", "RESPONSE", "REQUEST_CONTENT", "RESPONSE_CONTENT"],
      "deprecated": true
    },
    "method": {
      "title": "HTTP Method",
      "description": "HTTP method to invoke the endpoint.",
      "type": "string",
      "default": "GET",
      "enum": ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "CONNECT", "OPTIONS", "TRACE"]
    },
    "tags": {
      "type": "array",
      "title": "Tags",
      "description": "Some tags",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "maxItems": 3,
      "uniqueItems": true,
      "default": [
        "defaulted",
        "and again"
      ]
    },
    "url": {
      "title": "URL",
      "minLength": 1,
      "maxLength": 150,
      "type": "string",
      "gioConfig": {
        "secret": true,
        "el": true
      },
      "examples": ["http://localhost:8080/api"]
    },
    "constraints": {
      "type": "object",
      "title": "Constraint test bed",
      "description": "For the sake of testing",
      "properties": {
        "ratio": {
          "title": "Ratio",
          "type": "number",
          "minimum": 0.0,
          "maximum": 1.0
        },
        "lowerBounds": {
          "title": "Lower bounds",
          "type": "number",
          "exclusiveMinimum": 1,
          "maximum": 5
        },
        "middleBounds": {
          "title": "Middle bounds",
          "type": "number",
          "minimum": 5,
          "maximum": 10.333333333333
        },
        "upperBounds": {
          "title": "Upper bounds",
          "type": "number",
          "minimum": 10.25,
          "exclusiveMaximum": 15
        },
        "openUpperBounds": {
          "title": "Open upper bound",
          "type": "number",
          "minimum": 10
        },
        "openLowerBounds": {
          "title": "Open lower bound",
          "type": "number",
          "maximum": 10
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 1000
        }
      }
    },

    "proxy":{
      "type":"object",
      "title":"Proxy Options",
      "oneOf":[
        {
          "title":"No proxy",
          "properties":{
            "enabled":{
              "const":false
            },
            "useSystemProxy":{
              "const":false
            }
          },
          "additionalProperties":false
        },
        {
          "title":"Use proxy configured at system level",
          "properties":{
            "enabled":{
              "const":true
            },
            "useSystemProxy":{
              "const":true
            }
          },
          "additionalProperties":false
        },
        {
          "title":"Use proxy for client connections",
          "properties":{
            "enabled":{
              "const":true
            },
            "useSystemProxy":{
              "const":false
            },
            "type":{
              "type":"string",
              "title":"Proxy Type",
              "description":"The type of the proxy",
              "default":"SOCKS5",
              "enum":[
                "SOCKS4",
                "SOCKS5"
              ]
            },
            "host":{
              "type":"string",
              "title":"Proxy host",
              "description":"Proxy host to connect to",
              "examples": [
                "proxy.acme.com"
              ]
            },
            "port":{
              "type":"integer",
              "title":"Proxy port",
              "description":"Proxy port to connect to",
              "examples": [
                3524
              ]
            },
            "username":{
              "type":"string",
              "title":"Proxy username",
              "description":"Optional proxy username",
              "examples": [
                "admin"
              ]
            },
            "password":{
              "type":"string",
              "title":"Proxy password",
              "description":"Optional proxy password",
              "format":"password",
              "examples": [
                "[redacted]"
              ]
            }
          },
          "required":[
            "host",
            "port"
          ],
          "additionalProperties":false
        }
      ]
    },
    "headers": {
      "type": "array",
      "title": "Request Headers",
      "examples": [
          {"name": "Authorization", "value": "Basic Jfdueh2868d="},
          {"name": "X-Custom", "value": "Foo"}
      ],
      "items": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:callout:configuration:HttpHeader",
        "title": "Header",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "examples": ["Authorization"]
          },
          "value": {
            "title": "Value",
            "type": "string",
            "examples": ["Basic Jfdueh2868d="],
            "gioConfig": {
              "secret": true,
              "el": true
            }
          }
        }
      },
      "required": ["name", "value"]
    },
    "body": {
      "title": "Request body",
      "type": "string",
      "x-schema-form": {
        "type": "codemirror",
        "codemirrorOptions": {
          "placeholder": "Put request body here",
          "lineWrapping": true,
          "lineNumbers": true,
          "allowDropFileTypes": true,
          "autoCloseTags": true
        }
      }
    },
    "fireAndForget": {
      "title": "Fire & forget",
      "description": "Make the http call without expecting any response. When activating this mode, context variables and exit on error are useless.",
      "type": "boolean",
      "default": false
    },
    "variables": {
      "type": "array",
      "title": "Context variables",
      "items": {
        "type": "object",
        "id": "urn:jsonschema:io:gravitee:policy:callout:configuration:Variable",
        "title": "Variable",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "examples": ["field"]
          },
          "value": {
            "title": "Value",
            "type": "string",
            "default": "{#jsonPath(#calloutResponse.content, '$.field')}"
          }
        }
      },
      "required": ["name", "value"],
      "x-schema-form": {
        "hidden": [
          {
            "$eq": {
              "fireAndForget": true
            }
          }
        ]
      }
    },
    "exitOnError": {
      "title": "Exit on error",
      "description": "Terminate the request if the error condition is true",
      "type": "boolean",
      "default": false,
      "x-schema-form": {
        "hidden": [
          {
            "$eq": {
              "fireAndForget": true
            }
          }
        ]
      }
    },
    "errorCondition": {
      "title": "Error condition",
      "description": "The condition which will be verified to end the request (support EL).",
      "default": "{#calloutResponse.status >= 400 and #calloutResponse.status <= 599}",
      "type": "string",
      "gioConfig": {
        "el": true
      },
      "x-schema-form": {
        "expression-language": true,
        "hidden": [
          {
            "$eq": {
              "fireAndForget": true,
              "exitOnError": false
            }
          }
        ]
      }
    },
    "errorStatusCode": {
      "title": "Error status code",
      "description": "HTTP Status Code send to the consumer if the condition is true",
      "type": "string",
      "default": "500",
      "enum": [
        "100",
        "101",
        "102",
        "200",
        "201",
        "202",
        "203",
        "204",
        "205",
        "206",
        "207",
        "300",
        "301",
        "302",
        "303",
        "304",
        "305",
        "307",
        "400",
        "401",
        "402",
        "403",
        "404",
        "405",
        "406",
        "407",
        "408",
        "409",
        "410",
        "411",
        "412",
        "413",
        "414",
        "415",
        "416",
        "417",
        "422",
        "423",
        "424",
        "429",
        "500",
        "501",
        "502",
        "503",
        "504",
        "505",
        "507"
      ],
      "x-schema-form": {
        "type": "select",
        "titleMap": {
          "100": "100 - CONTINUE",
          "101": "101 - SWITCHING_PROTOCOLS",
          "102": "102 - PROCESSING",
          "200": "200 - OK",
          "201": "201 - CREATED",
          "202": "202 - ACCEPTED",
          "203": "203 - NON_AUTHORITATIVE_INFORMATION",
          "204": "204 - NO_CONTENT",
          "205": "205 - RESET_CONTENT",
          "206": "206 - PARTIAL_CONTENT",
          "207": "207 - MULTI_STATUS",
          "300": "300 - MULTIPLE_CHOICES",
          "301": "301 - MOVED_PERMANENTLY",
          "302": "302 - FOUND OR MOVED_TEMPORARILY",
          "303": "303 - SEE_OTHER",
          "304": "304 - NOT_MODIFIED",
          "305": "305 - USE_PROXY",
          "307": "307 - TEMPORARY_REDIRECT",
          "400": "400 - BAD_REQUEST",
          "401": "401 - UNAUTHORIZED",
          "402": "402 - PAYMENT_REQUIRED",
          "403": "403 - FORBIDDEN",
          "404": "404 - NOT_FOUND",
          "405": "405 - METHOD_NOT_ALLOWED",
          "406": "406 - NOT_ACCEPTABLE",
          "407": "407 - PROXY_AUTHENTICATION_REQUIRED",
          "408": "408 - REQUEST_TIMEOUT",
          "409": "409 - CONFLICT",
          "410": "410 - GONE",
          "411": "411 - LENGTH_REQUIRED",
          "412": "412 - PRECONDITION_FAILED",
          "413": "413 - REQUEST_ENTITY_TOO_LARGE",
          "414": "414 - REQUEST_URI_TOO_LONG",
          "415": "415 - UNSUPPORTED_MEDIA_TYPE",
          "416": "416 - REQUESTED_RANGE_NOT_SATISFIABLE",
          "417": "417 - EXPECTATION_FAILED",
          "422": "422 - UNPROCESSABLE_ENTITY",
          "423": "423 - LOCKED",
          "424": "424 - FAILED_DEPENDENCY",
          "429": "429 - TOO_MANY_REQUESTS",
          "500": "500 - INTERNAL_SERVER_ERROR",
          "501": "501 - NOT_IMPLEMENTED",
          "502": "502 - BAD_GATEWAY",
          "503": "503 - SERVICE_UNAVAILABLE",
          "504": "504 - GATEWAY_TIMEOUT",
          "505": "505 - HTTP_VERSION_NOT_SUPPORTED",
          "507": "507 - INSUFFICIENT_STORAGE"
        },
        "hidden": [
          {
            "$eq": {
              "fireAndForget": true,
              "exitOnError": false
            }
          }
        ]
      }
    },
    "errorContent": {
      "title": "Error response body",
      "description": "The body response of the error if the condition is true (support EL)",
      "type": "string",
      "x-schema-form": {
        "type": "codemirror",
        "codemirrorOptions": {
          "placeholder": "Put response body here",
          "lineWrapping": true,
          "lineNumbers": true,
          "allowDropFileTypes": true,
          "autoCloseTags": true,
          "mode": "javascript"
        },
        "expression-language": true,
        "hidden": [
          {
            "$eq": {
              "fireAndForget": true,
              "exitOnError": false
            }
          }
        ]
      }
    },
    "ssl": {
      "$ref": "#/definitions/ssl"
    }
  },
  "required": ["url", "method", "exitOnError"],
  "definitions": {
    "sslTrustStoreHostnameVerifier": {
      "title": "Verify Host",
      "description": "Use to enable host name verification",
      "type": "boolean",
      "default": true
    },
    "sslTrustStoreTrustAll": {
      "title": "Trust all",
      "description": "Use this with caution (if over Internet). The gateway must trust any origin certificates. The connection will still be encrypted but this mode is vulnerable to 'man in the middle' attacks.",
      "type": "boolean",
      "default": false
    },
    "sslTrustStorePassword": {
      "type": "string",
      "title": "Password",
      "description": "Truststore password",
      "format": "password",
      "examples": [
        "[redacted]"
      ],
      "gioConfig": {
        "banner": {
          "title": "SSL truststore password",
          "text": "The password for the truststore file. If a password is not set, truststore file configured will still be used, but integrity checking is disabled. Truststore password is not supported for PEM format."
        }
      }
    },
    "sslTrustStorePath": {
      "type": "string",
      "title": "Path to truststore",
      "description": "Path to the truststore file"
    },
    "sslTrustStoreContent": {
      "type": "string",
      "title": "Content",
      "description": "Binary content as Base64",
      "format": "text",
      "examples": [
        "--- BEGIN CERTIFICATE ---\n\n--- END CERTIFICATE ---"
      ]
    },
    "sslKeyStorePassword": {
      "type": "string",
      "title": "Password",
      "description": "Password to use to open the key store",
      "format": "password"
    },
    "sslKeyStoreAlias": {
      "type": "string",
      "title": "Alias for the key",
      "description": "Alias of the key to use in case the key store contains more than one key"
    },
    "sslKeyStoreKeyPassword": {
      "type": "string",
      "title": "Key Password",
      "description": "Password to use to access the key when protected by password",
      "format": "password"
    },
    "sslKeyStorePath": {
      "type": "string",
      "title": "Path to key store",
      "description": "Path to the key store file"
    },
    "sslKeyStoreContent": {
      "type": "string",
      "title": "Content",
      "description": "Binary content as Base64",
      "format": "text"
    },
    "sslKeyStoreCertPath": {
      "type": "string",
      "title": "Path to cert file",
      "description": "Path to cert file (.PEM)"
    },
    "sslKeyStoreCertContent": {
      "type": "string",
      "title": "Certificate",
      "format": "text"
    },
    "sslKeyStoreKeyPath": {
      "type": "string",
      "title": "Path to private key file",
      "description": "Path to private key file (.PEM)"
    },
    "sslKeyStoreKeyContent": {
      "type": "string",
      "title": "Private key",
      "format": "text"
    },
    "ssl": {
      "type": "object",
      "title": "SSL Options",
      "properties": {
        "hostnameVerifier": {
          "$ref": "#/definitions/sslTrustStoreHostnameVerifier"
        },
        "trustAll": {
          "$ref": "#/definitions/sslTrustStoreTrustAll"
        },
        "trustStore": {
          "type": "object",
          "title": "Truststore",
          "oneOf": [
            {
              "type": "object",
              "title": "None",
              "properties": {
                "type": {
                  "const": ""
                }
              }
            },
            {
              "type": "object",
              "title": "JKS with path",
              "properties": {
                "type": {
                  "const": "JKS"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "path": {
                  "$ref": "#/definitions/sslTrustStorePath"
                }
              },
              "required": [
                "password",
                "path"
              ]
            },
            {
              "type": "object",
              "title": "JKS with content",
              "properties": {
                "type": {
                  "const": "JKS"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "content": {
                  "$ref": "#/definitions/sslTrustStoreContent"
                }
              },
              "required": [
                "password",
                "content"
              ]
            },
            {
              "type": "object",
              "title": "PKCS#12 / PFX with path",
              "properties": {
                "type": {
                  "const": "PKCS12"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "path": {
                  "$ref": "#/definitions/sslTrustStorePath"
                }
              },
              "required": [
                "password",
                "path"
              ]
            },
            {
              "type": "object",
              "title": "PKCS#12 / PFX with content",
              "properties": {
                "type": {
                  "const": "PKCS12"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "content": {
                  "$ref": "#/definitions/sslTrustStoreContent"
                }
              },
              "required": [
                "password",
                "content"
              ]
            },
            {
              "type": "object",
              "title": "PEM with path",
              "properties": {
                "type": {
                  "const": "PEM"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "path": {
                  "$ref": "#/definitions/sslTrustStorePath"
                }
              },
              "required": [
                "password",
                "path"
              ]
            },
            {
              "type": "object",
              "title": "PEM with content",
              "properties": {
                "type": {
                  "const": "PEM"
                },
                "password": {
                  "$ref": "#/definitions/sslTrustStorePassword"
                },
                "content": {
                  "$ref": "#/definitions/sslTrustStoreContent"
                }
              },
              "required": [
                "password",
                "content"
              ]
            }
          ]
        },
        "keyStore": {
          "type": "object",
          "title": "Key store",
          "oneOf": [
            {
              "type": "object",
              "title": "None",
              "properties": {
                "type": {
                  "const": ""
                }
              }
            },
            {
              "type": "object",
              "title": "JKS with path",
              "properties": {
                "type": {
                  "const": "JKS"
                },
                "password": {
                  "$ref": "#/definitions/sslKeyStorePassword"
                },
                "alias": {
                  "$ref": "#/definitions/sslKeyStoreAlias"
                },
                "keyPassword": {
                  "$ref": "#/definitions/sslKeyStoreKeyPassword"
                },
                "path": {
                  "$ref": "#/definitions/sslKeyStorePath"
                }
              },
              "required": [
                "password",
                "path"
              ]
            },
            {
              "type": "object",
              "title": "JKS with content",
              "properties": {
                "type": {
                  "const": "JKS"
                },
                "password": {
                  "$ref": "#/definitions/sslKeyStorePassword"
                },
                "alias": {
                  "$ref": "#/definitions/sslKeyStoreAlias"
                },
                "keyPassword": {
                  "$ref": "#/definitions/sslKeyStoreKeyPassword"
                },
                "content": {
                  "$ref": "#/definitions/sslKeyStoreContent"
                }
              },
              "required": [
                "password",
                "content"
              ]
            },
            {
              "type": "object",
              "title": "PKCS#12 / PFX with path",
              "properties": {
                "type": {
                  "const": "PKCS12"
                },
                "password": {
                  "$ref": "#/definitions/sslKeyStorePassword"
                },
                "alias": {
                  "$ref": "#/definitions/sslKeyStoreAlias"
                },
                "keyPassword": {
                  "$ref": "#/definitions/sslKeyStoreKeyPassword"
                },
                "path": {
                  "$ref": "#/definitions/sslKeyStorePath"
                }
              },
              "required": [
                "password",
                "path"
              ]
            },
            {
              "type": "object",
              "title": "PKCS#12 / PFX with content",
              "properties": {
                "type": {
                  "const": "PKCS12"
                },
                "password": {
                  "$ref": "#/definitions/sslKeyStorePassword"
                },
                "alias": {
                  "$ref": "#/definitions/sslKeyStoreAlias"
                },
                "keyPassword": {
                  "$ref": "#/definitions/sslKeyStoreKeyPassword"
                },
                "content": {
                  "$ref": "#/definitions/sslKeyStoreContent"
                }
              },
              "required": [
                "password",
                "content"
              ]
            },
            {
              "type": "object",
              "title": "PEM with path",
              "properties": {
                "type": {
                  "const": "PEM"
                },
                "certPath": {
                  "$ref": "#/definitions/sslKeyStoreCertPath"
                },
                "keyPath": {
                  "$ref": "#/definitions/sslKeyStoreKeyPath"
                }
              },
              "required": [
                "certPath",
                "keyPath"
              ]
            },
            {
              "type": "object",
              "title": "PEM with content",
              "properties": {
                "type": {
                  "const": "PEM"
                },
                "certContent": {
                  "$ref": "#/definitions/sslKeyStoreCertContent"
                },
                "keyContent": {
                  "$ref": "#/definitions/sslKeyStoreKeyContent"
                }
              },
              "required": [
                "certContent",
                "keyContent"
              ]
            }
          ]
        }
      }
    }
  }
}
